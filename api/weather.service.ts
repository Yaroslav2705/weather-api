/**
 * Weather Forecast API
 * Weather API application that allows users to subscribe to weather updates for their city.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { GetWeather200Response } from '../model/getWeather200Response';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class WeatherService {

    protected basePath = 'http://weatherapi.app/api';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Get current weather for a city
     * Returns the current weather forecast for the specified city using WeatherAPI.com.
     * @param city City name for weather forecast
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getWeatherOpts.config] Override http request option.
     */
    public getWeather(city: string, getWeatherOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<GetWeather200Response>>;
    public getWeather(city: string, getWeatherOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling getWeather.');
        }

        let queryParameters = new URLSearchParams();
        if (city !== undefined && city !== null) {
            queryParameters.append('city', <any>city);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<GetWeather200Response>(`${this.basePath}/weather`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getWeatherOpts?.config,
                        headers: {...headers, ...getWeatherOpts?.config?.headers},
                    }
                );
            })
        );
    }
}
